# TARGETS: applied to the targets to compare to during training/validation/testing
_target_: src.datamodules.datapipes.DataPipe
operations:
  # Processes to apply to all
  targets_difference_normalized:
    _target_: src.datamodules.datapipes.transform.rppg_toolbox.DiffNormalizeLabels
    key: ${assign:input}

  # Copy
  targets_copy_key:
    _target_: src.datamodules.datapipes.transform.CopyKey
    old_key: ${assign:input}
    new_key: ${assign:input}_unnormalized # keep un-normalized for predictions (only normalize for loss calculation)

  # Training-specific Target Processing
  targets_normalize_for_loss: # NOTE: They normalize per batch
    _target_: src.datamodules.datapipes.transform.signal.NormalizeSignal
    key: ${assign:input}

  # # Prepare data
  # targets_copy_key:
  #   _target_: src.datamodules.datapipes.transform.CopyKey
  #   old_key: ${assign:input}
  #   new_key: ${assign:input}_filtered

  # rPPG BVP Waveform
  # accumulate_signal:
  #   _target_: src.datamodules.datapipes.transform.signal.AccumulateSignal
  #   key: ${assign:input} # vs. _filtered

  # # Heart-rate BPM
  # targets_detrend_signal:
  #   _target_: src.datamodules.datapipes.transform.signal.TimeFIIRHighPassFilter
  #   signal: ${assign:input}_filtered
  #   lmbda: 100
  # targets_bandpass_filter:
  #   _target_: src.datamodules.datapipes.transform.signal.ButterworthFilter
  #   signal: ${assign:input}_filtered
  #   order: 2
  #   frequencies: ${model.process.frequencies}
  #   ftype: bandpass
  # targets_dominant_frequency:
  #   _target_: src.datamodules.datapipes.process.signal.DominantFrequency
  #   signal: ${assign:input}_filtered
  #   wn: ${model.process.frequencies}
